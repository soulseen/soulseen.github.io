[{"title":"基于CA根证书签名的双向数字证书认证方式介绍","url":"/2019/04/05/基于CA根证书签名的双向数字证书认证方式介绍/","content":"\n&emsp;&emsp;Kubernetes集群中所有资源的访问方式和变更都是通过Kubernetes API Server的REST API来实现的，所以集群安全的关键点就在于如何识别并认证客户端身份(Authentication)，以及随后访问权限的授权(Authorization)这两个关键问题。\n\n&emsp;&emsp;Kubernetes一共提供了3中级别的客户端身份认证方式。\n\n- HTTPS证书认证：基于CA根证书签名的双向数字证书认证方式介绍\n- HTTP Token认证：通过Token来识别合法用户\n- HTTP Base认证：通过用户名和密码认证\n\n&emsp;本次搭建使用的是CA认证，相比于其余二中更加可靠，但是也更加难于理解。\n\n&emsp;首先需要有一个CA证书，CA是PKI系统中通信双方都信任的实体，作为可信第三方存在(TTP)。CA首先必须让用户信任，并且让能信任者追究自己的责任。CA主要通过证书证实他人的公钥信息，证书上也有CA的签名。也正是因为CA承担责任的承诺，被称为可信第三方。通常情况下，CA与用户是相互独立的，CA作为服务提供方，也可能会因为数据有误而给用户带来损失。在证书中绑定了公钥数据和拥有用户的相关身份信息，并带有CA的数字签名，也包含了CA的名称信息。\n\n&emsp;CA涉及到的概念比较多，比如根证书、自签名证书、密钥、私钥等。下面主要写SSL协议的流程，以便更好的理解CA认证和Kubernetes CA认证。\n\n&emsp;关于SSL(Secure Socket Laye)，首先举个例子。我有一个箱子，一把锁和一把钥匙，我把箱子和开着的锁可以给任何需要给我写信的人，他写了信放箱子里，锁上，然后传递回我手上的途中谁都打不开箱子，只有我可以用原来的钥匙打开，这就是SSL，公钥，私钥传递加密消息的方式。\n\n&emsp;推荐一篇不错的文章，《**[SSL Certificates HOWTO](<http://www.tldp.org/HOWTO/SSL-Certificates-HOWTO/x64.html>)**》，其中介绍了详细介绍了SSL的具体流程，以及对公钥、私钥、加密、证书等的相关解释。\n\n&emsp;其中CA认证可大致理解为一下几个步骤:\n\n1、HTTPS通信的双方向CA申请证书，CA机构下发根证书、服务端证书以及私钥给申请者。\n\n2、客户端向服务器端发起请求，服务端下发服务端证书给客户端。客户端接收到证书后，通过私钥解密证书，\n\n\n\n","tags":["k8s，CA认证"]},{"title":"二进制部署Etcd高可用版Kubernetes","url":"/2019/04/05/二进制部署Etcd高可用版Kubernetes/","content":"\n### 说明\n\n​\t本环境介绍使用二进制的方式部署 `kubernetes` 集群的所有步骤，其中高可用部署`Etcd`，以便让初学者更好的理解K8s的鉴权、系统各组件的交互原理等，进而能快速解决实际问题。若想快速部署一个k8s集群可使用minikube或者kubeadm。\n\n### 前提条件\n\n​\t1、科学上网\n\n​\t2、节点配置情况：\n\n|      node       |      ip      | cpu/mem |\n| :-------------: | :----------: | :-----: |\n| k8s-1-1(master) | 192.168.0.19 |  2核4G  |\n|  k8s-1-2(node)  | 192.168.0.20 |  2核4G  |\n|  k8s-1-3(node)  | 192.168.0.3  |  2核4G  |\n\n​\t操作系统版本：CentOS Linux release 7.5.1804 (Core),\n\n### 安装前准备\n\n​\t1、在所有节点上安装Docker CE ，安装方式请参考[Get Docker CE for CentOS](<https://docs.docker.com/install/linux/docker-ce/centos/#prerequisites>)\n\n​\t2、关闭所有节点的SELinux，修改`/etc/selinux/config`文件中设置SELINUX=disabled ，然后重启服务器。\n\n​\t3、关闭交换分区，swapoff -a \n\n​\t4、关闭防火墙，systemctl stop firewalld && systemctl disable firewalld\n\n### 安装步骤介绍\n\n0、基于CA根证书签名的双向数字证书认证方式介绍\n\n1、创建TLS证书和密钥\n\n2、安装bukectl命令行工具\n\n3、创建kubeconfig文件\n\n4、搭建高可用Etcd集群\n\n5、部署master节点\n\n6、安装flannel网络插件\n\n7、部署node节点\n\n8、安装kebedns\n\n各种插件选装\n\n未完待续。。。"},{"title":"Hello World","url":"/2019/03/10/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n"}]